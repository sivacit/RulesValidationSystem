/*
 * MarkdownEditor
 * Copyright (c) 2018 Alex Titarenko (MIT License)
 */

(function (window) {
    // constructor
    class MarkdownEditor {
        static get FULLSCREEN_CLASS() { return "markdown-editor-fullscreen"; }

        constructor(options) {
            var opts = options || {}, defaultSettings = {
                container: 'MarkdownEditor',
                fullscreenButtonTitle: "Toggle fullscreen mode",
                previewButtonTitle: "Toggle preview mode",
                markdownToHtmlConvertor: function (markdown) { return markdown; },
                saveContentUrl: null,
                additionalButtons: [],
                window: window
            };

            this.toolbar = [
                {
                    name: "",
                    buttons: [
                        { title: "Bold", className: "glyphicon glyphicon-bold", action: toolbarActions.bold },
                        { title: "Italic", className: "glyphicon glyphicon-italic", action: toolbarActions.italic },
                        { title: "Heading", className: "glyphicon glyphicon-header", action: null }
                    ]
                },
                {
                    name: "",
                    buttons: [
                        { title: "Link", className: "glyphicon glyphicon-link", action: toolbarActions.link },
                        { title: "Image", className: "glyphicon glyphicon-picture", action: toolbarActions.image }
                    ]
                },
                {
                    name: "",
                    buttons: [
                        { title: "Unordered List", className: "glyphicon glyphicon-list", action: toolbarActions.ulist },
                        { title: "Ordered List", className: "glyphicon glyphicon-th-list", action: toolbarActions.olist },
                        { title: "Blockquote", className: "glyphicon glyphicon-comment", action: toolbarActions.quote },
                        { title: "Code", className: "glyphicon glyphicon-asterisk", action: toolbarActions.code }
                    ]
                }
            ];

            this.settings = {
                container: opts.container || defaultSettings.container,
                fullscreenButtonTitle: opts.fullscreenButtonTitle || defaultSettings.fullscreenButtonTitle,
                previewButtonTitle: opts.previewButtonTitle || defaultSettings.previewButtonTitle,
                markdownToHtmlConvertor: opts.markdownToHtmlConvertor || defaultSettings.markdownToHtmlConvertor,
                additionalButtons: opts.additionalButtons || defaultSettings.additionalButtons,
                saveContentUrl: opts.saveContentUrl || defaultSettings.saveContentUrl,
                window: opts.window || defaultSettings.window
            };

            this._elements = {};

            if (typeof this.settings.container === 'string') {
                this._elements.editor = this.settings.window.document.getElementById(this.settings.container);
            }
            else if (typeof this.settings.container === 'object') {
                this._elements.editor = this.settings.container;
            }
        }

        load(callback) {
            buildEditor(this);
            registerHandlers(this);

            callback = callback || function () { };
            callback.call(this);
        }

        changeMode(mode) {
            this._elements.wrapper.setAttribute("data-mode", mode);
            updatePreview(this);
        }

        enterFullscreen() {
            if (this.isFullscreenMode()) {
                this.exitFullscreen();
            }
            else {
                var element = this._elements.wrapper;
                element.classList.add(MarkdownEditor.FULLSCREEN_CLASS);
                this.settings.window.document.body.classList.add(MarkdownEditor.FULLSCREEN_CLASS);
            }
        }

        exitFullscreen() {
            var element = this._elements.wrapper;
            element.classList.remove(MarkdownEditor.FULLSCREEN_CLASS);
            this.settings.window.document.body.classList.remove(MarkdownEditor.FULLSCREEN_CLASS);
        }

        isFullscreenMode() {
            var result = this._elements.wrapper.classList.contains(MarkdownEditor.FULLSCREEN_CLASS);
            return result;
        }

        getContent() {
            return this._elements.editor.value;
        }

        getSelection() {
            var editor = this._elements.editor;
            var len = editor.selectionEnd - editor.selectionStart;
            return {
                start: editor.selectionStart,
                end: editor.selectionEnd,
                length: len,
                text: editor.value.substr(editor.selectionStart, len)
            };
        }

        setSelection(start, end) {
            var editor = this._elements.editor;
            editor.selectionStart = start;
            editor.selectionEnd = end;
        }

        replaceSelection(text) {
            var editor = this._elements.editor;
            editor.value = editor.value.substr(0, editor.selectionStart) + text + editor.value.substr(editor.selectionEnd, editor.value.length);
            editor.selectionStart = editor.value.length;
        }
    }

    var toolbarActions = {
        decorate: function(e, seq, defaultText) {
            var seqLen = seq.length;
            var chunk, cursor, selected = e.getSelection(), content = e.getContent();

            if (selected.length === 0) {
                chunk = defaultText;
            } else {
                chunk = selected.text;
            }

            // transform selection and set the cursor into chunked text
            if (content.substr(selected.start - seqLen, seqLen) === seq
                && content.substr(selected.end, seqLen) === seq) {
                e.setSelection(selected.start - seqLen, selected.end + seqLen);
                e.replaceSelection(chunk);
                cursor = selected.start - seqLen;
            } else {
                e.replaceSelection(seq + chunk + seq);
                cursor = selected.start + seqLen;
            }

            // Set the cursor
            e.setSelection(cursor, cursor + chunk.length);
        },

        prependToSelection: function (e, seq, defaultText) {
            var chunk, cursor, selected = e.getSelection(), seqLen = seq.length;

            // transform selection and set the cursor into chunked text
            if (selected.length === 0) {
                chunk = defaultText;

                e.replaceSelection(seq + chunk);
                // Set the cursor
                cursor = selected.start + seqLen;
            } else {
                if (selected.text.indexOf('\n') < 0) {
                    chunk = selected.text;

                    e.replaceSelection(seq + chunk);

                    // Set the cursor
                    cursor = selected.start + seqLen;
                } else {
                    var list = [];

                    list = selected.text.split('\n');
                    chunk = list[0];

                    list.forEach(function (v, k) {
                        list[k] = seq + v;
                    });

                    e.replaceSelection('\n\n' + list.join('\n'));

                    // Set the cursor
                    cursor = selected.start + seqLen + 2;
                }
            }
        },

        bold: function (e) {
            toolbarActions.decorate(e, "**", "Strong text");
        },

        italic: function (e) {
            toolbarActions.decorate(e, "_", "Emphasized text");
        },

        heading: function (e) {

        },

        link: function (e) {
            var chunk, cursor, selected = e.getSelection(), link;

            if (selected.length === 0) {
                chunk = "Enter link description here";
            } else {
                chunk = selected.text;
            }

            link = e.settings.window.prompt("Insert Hyperlink", 'http://');

            if (link !== null && link !== '' && link !== 'http://' && link.substr(0, 4) === 'http') {
                var sanitizedLink = link;

                // transform selection and set the cursor into chunked text
                e.replaceSelection('[' + chunk + '](' + sanitizedLink + ')');
                cursor = selected.start + 1;

                // Set the cursor
                e.setSelection(cursor, cursor + chunk.length);
            }
        },

        image: function (e) {
            var chunk, cursor, selected = e.getSelection(), link;

            if (selected.length === 0) {
                chunk = 'Enter image description here';
            } else {
                chunk = selected.text;
            }

            link = e.settings.window.prompt('Insert Image Hyperlink', 'http://');

            if (link !== null && link !== '' && link !== 'http://') {
                var sanitizedLink = link;

                // transform selection and set the cursor into chunked text
                e.replaceSelection('![' + chunk + '](' + sanitizedLink + ' "' + 'Enter image title here' + '")');
                cursor = selected.start + 2;

                // Set the cursor
                e.setSelection(cursor, cursor + chunk.length);
            }
        },

        ulist: function (e) {
            toolbarActions.prependToSelection(e, "- ", "List text here");
        },

        olist: function (e) {
            toolbarActions.prependToSelection(e, "1. ", "List text here");
        },

        quote: function (e) {
            toolbarActions.prependToSelection(e, "> ", "Quote here");
        },

        code: function (e) {
            toolbarActions.decorate(e, "```", "Code block");
        }
    };


    function buildEditor(editor) {
        var document = editor.settings.window.document;

        // create wrapper
        var wrapElement = document.createElement("div");
        wrapElement.setAttribute("class", "markdown-editor-wrapper");
        editor._elements.wrapper = wrapElement;

        wrapElement.innerHTML =
            `<div class='markdown-editor-header btn-toolbar'>
                <div class="btn-group markdown-editor-modes" data-toggle="buttons">
                    <label class="btn btn-default active" data-me-mode="editor" title="Editor">
                        <input type="radio" name="markdownEditorMode" value="Editor" checked>
                        <span class="glyphicon glyphicon-pencil"></span>
                    </label>
                    <label class="btn btn-default" data-me-mode="preview" title="Preview">
                        <input type="radio" name="markdownEditorMode" value="Preview">
                        <span class="glyphicon glyphicon-eye-open"></span>
                    </label>
                    <label class="btn btn-default" data-me-mode="split" title="Split mode">
                        <input type="radio" name="markdownEditorMode" value="Split">
                        <span class="glyphicon glyphicon-adjust"></span>
                    </label>
                </div>

                <div class='btn-toolbar float-left markdown-toolbar-buttons'>
                </div>

                <div class='btn-toolbar float-right' style='margin-right:5px'>
                    <div class='btn-group' style='${editor.settings.saveContentUrl ? '' : 'display:none'}'>
                        <button type='button' role='button' tabindex='0' class='btn btn-primary markdowneditor-save-btn'>
                            <span class='glyphicon glyphicon-save'></span> Save
                        </button>
                    </div>

                    <div class='btn-group'>
                        <button type='button' class='btn markdowneditor-fullscreen-btn' title='${editor.settings.fullscreenButtonTitle}'>
                            <span class='glyphicon glyphicon-fullscreen'></span>
                        </button>
                    </div>
                </div>
            </div>`;

        var rowElement = document.createElement("div");
        rowElement.setAttribute("class", "markdown-editor-row");

        var previewElement = document.createElement("div");
        previewElement.setAttribute("class", "markdown-editor-preview");
        var previewContentElement = document.createElement("div");
        previewContentElement.setAttribute("class", "markdown-editor-preview-content");
        previewElement.appendChild(previewContentElement);

        editor._elements.preview = previewContentElement;

        var parent = editor._elements.editor.parentNode;
        var sibling = editor._elements.editor.nextSibling;
        rowElement.appendChild(editor._elements.editor);
        rowElement.appendChild(previewElement);

        wrapElement.appendChild(rowElement);

        if (sibling) {
            parent.insertBefore(wrapElement, sibling);
        } else {
            parent.appendChild(wrapElement);
        }

        // build toolbar
        var toolbarButtons = wrapElement.getElementsByClassName("markdown-toolbar-buttons")[0];
        var buttonGroups = renderButtons(editor, editor.toolbar.concat(editor.settings.additionalButtons || []));
        for (var i = 0; i < buttonGroups.length; i++) {
            toolbarButtons.appendChild(buttonGroups[i]);
        }

        editor._elements.fullscreenButton = wrapElement.getElementsByClassName("markdowneditor-fullscreen-btn")[0];
        editor._elements.saveButton = wrapElement.getElementsByClassName("markdowneditor-save-btn")[0];
    }

    function updatePreview(editor) {
        var markdownText = editor.getContent();
        var htmlText = editor.settings.markdownToHtmlConvertor(markdownText);
        editor._elements.preview.innerHTML = htmlText;
    }

    function renderButtons(editor, groups) {
        var result = [];
        
        for (var i = 0; i < groups.length; i++) {
            var group = groups[i];
            var groupElement = renderButtonsGroup(editor, group);
            result.push(groupElement);
        }

        return result;
    }

    function renderButtonsGroup(editor, group) {
        var document = editor.settings.window.document;
        var groupElement = document.createElement("div");
        var self = editor;
        groupElement.setAttribute("class", "btn-group");
        for (var i = 0; i < group.buttons.length; i++) {
            var button = group.buttons[i], buttonElement = document.createElement("button");
            if (!button.action) {
                continue;
            }
            buttonElement.setAttribute("type", "button");
            buttonElement.setAttribute("class", "btn btn-default");
            buttonElement.setAttribute("title", button.title);
            var innerElement = document.createElement("span");
            innerElement.setAttribute("class", button.className);
            buttonElement.action = button.action;
            var act = function (action) {
                return function (e) {
                    action(self);
                    updatePreview(self);
                };
            };
            buttonElement.addEventListener("click", act(button.action));
            buttonElement.appendChild(innerElement);
            groupElement.appendChild(buttonElement);
        }
        return groupElement;
    }

    function registerHandlers(editor) {
        var wrapElement = editor._elements.wrapper,
            window = editor.settings.window;

        editor._elements.fullscreenButton.addEventListener('click', function (e) {
            editor.enterFullscreen();
        });

        registerSaveButtonHandler(editor);

        var modeElements = wrapElement.querySelectorAll(".markdown-editor-modes label.btn");
        for (var i = 0; i < modeElements.length; i++) {
            modeElements[i].addEventListener('click', function (e) {
                editor.changeMode(e.currentTarget.getAttribute("data-me-mode"));
            });
        }

        var keypressTimer;
        function onTextChange() {
            if (keypressTimer) {
                window.clearTimeout(keypressTimer);
            }
            keypressTimer = window.setTimeout(function () {
                updatePreview(editor);
            }, 250);
        }

        editor._elements.editor.addEventListener("input", onTextChange);
    }

    function registerSaveButtonHandler(editor) {
        if (editor.settings.saveContentUrl) {
            var wrapElement = editor._elements.wrapper;
            var saveButton = editor._elements.saveButton;

            saveButton.addEventListener('click', function (e) {
                saveButton.disabled = true;

                var xhr = new XMLHttpRequest();
                xhr.open("PATCH", editor.settings.saveContentUrl, true);
                xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                xhr.setRequestHeader("Content-Type", "text/plain");

                xhr.onreadystatechange = function () {
                    if(xhr.readyState === XMLHttpRequest.DONE) {
                        saveButton.disabled = false;

                        var alertClass = "success";
                        var message = "The content has been successfully saved.";

                        if (xhr.status !== 200) {
                            alertClass = "danger";
                            message = "An error occured while saving the content.";
                        }

                        var alert = document.createElement("div");
                        alert.setAttribute("class", `alert alert-${alertClass}`);
                        alert.setAttribute("style", "position:absolute;display:none;top:20px;left:50%;transform:translate(-50%,0)");
                        alert.setAttribute("role", "alert");
                        alert.innerText = message;

                        wrapElement.appendChild(alert);

                        $(alert).fadeIn(1000, function () {
                            window.setTimeout(function () {
                                $(alert).fadeOut(4000, function () {
                                    $(this).alert("close");
                                });
                            }, 2000);
                        });
                    }
                };

                xhr.send(editor.getContent());
            });
        }
    }

    window.MarkdownEditor = MarkdownEditor;
})(window);
